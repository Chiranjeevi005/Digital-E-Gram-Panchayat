import jsPDF from 'jspdf'
import { autoTable } from 'jspdf-autotable'
import html2canvas from 'html2canvas'

/**
 * Show a simple notification message to the user
 * @param message - The message to display
 */
function showNotification(message: string) {
  // Create a simple notification element
  const notification = document.createElement('div')
  notification.textContent = message
  notification.style.position = 'fixed'
  notification.style.top = '80px'
  notification.style.left = '50%'
  notification.style.transform = 'translateX(-50%)'
  notification.style.backgroundColor = '#3b82f6'
  notification.style.color = 'white'
  notification.style.padding = '10px 16px'
  notification.style.borderRadius = '6px'
  notification.style.zIndex = '9999'
  notification.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)'
  notification.style.fontFamily = 'sans-serif'
  notification.style.fontSize = '14px'
  notification.style.maxWidth = '90vw'
  notification.style.textAlign = 'center'
  notification.style.wordWrap = 'break-word'
  
  document.body.appendChild(notification)
  
  // Remove the notification after 3 seconds
  setTimeout(() => {
    if (notification.parentNode) {
      notification.parentNode.removeChild(notification)
    }
  }, 3000)
}

/**
 * Generate a professional PDF document from application data
 * @param applicationData - The application form data
 * @param serviceName - The name of the service
 * @param userName - The name of the applicant
 * @returns Blob - The generated PDF as a Blob
 */
async function generatePDF(
  applicationData: Record<string, any>,
  serviceName: string,
  userName: string
): Promise<Blob> {
  const doc = new jsPDF()
  
  // Add title
  doc.setFontSize(22)
  doc.setTextColor(0, 0, 139) // Dark blue color
  doc.text('Digital e-Gram Panchayat Record', 105, 20, { align: 'center' })
  
  // Add subtitle
  doc.setFontSize(16)
  doc.setTextColor(0, 0, 0) // Black color
  doc.text(serviceName, 105, 35, { align: 'center' })
  
  // Add applicant name
  doc.setFontSize(12)
  doc.text(`Applicant: ${userName}`, 20, 50)
  
  // Add date
  const currentDate = new Date().toLocaleDateString()
  doc.text(`Date: ${currentDate}`, 150, 50)
  
  // Prepare data for table
  const tableData: any[] = []
  Object.entries(applicationData).forEach(([key, value]) => {
    // Format the key to be more readable
    const formattedKey = key
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, (str) => str.toUpperCase())
    
    // Format the value
    let formattedValue = ''
    if (Array.isArray(value)) {
      formattedValue = value.join(', ')
    } else if (value instanceof Date) {
      formattedValue = value.toLocaleDateString()
    } else {
      formattedValue = String(value || 'Not provided')
    }
    
    tableData.push([formattedKey, formattedValue])
  })
  
  // Add table with application data using autoTable
  autoTable(doc, {
    startY: 60,
    head: [['Field', 'Value']],
    body: tableData,
    theme: 'grid',
    headStyles: {
      fillColor: [0, 0, 139], // Dark blue
      textColor: [255, 255, 255] // White text
    },
    styles: {
      fontSize: 10,
      cellPadding: 3
    },
    columnStyles: {
      0: { cellWidth: 50 },
      1: { cellWidth: 110 }
    }
  })
  
  // Add footer
  const pageCount = (doc as any).getNumberOfPages()
  for (let i = 1; i <= pageCount; i++) {
    doc.setPage(i)
    doc.setFontSize(10)
    doc.setTextColor(150)
    doc.text(
      `Page ${i} of ${pageCount} | Generated by Digital e-Gram Panchayat`,
      105,
      doc.internal.pageSize.height - 10,
      { align: 'center' }
    )
  }
  
  // Return as Blob
  return doc.output('blob')
}

/**
 * Generate a JPG image from application data
 * @param applicationData - The application form data
 * @param serviceName - The name of the service
 * @param userName - The name of the applicant
 * @returns Blob - The generated JPG as a Blob
 */
async function generateJPG(
  applicationData: Record<string, any>,
  serviceName: string,
  userName: string
): Promise<Blob> {
  // Create a temporary HTML element to render the content
  const tempElement = document.createElement('div')
  tempElement.style.position = 'absolute'
  tempElement.style.left = '-9999px'
  tempElement.style.width = '800px'
  tempElement.style.padding = '20px'
  tempElement.style.fontFamily = 'Arial, sans-serif'
  tempElement.style.backgroundColor = 'white'
  
  // Build HTML content
  let htmlContent = `
    <div style="text-align: center; margin-bottom: 20px;">
      <h1 style="color: #00008B; margin: 0;">Digital e-Gram Panchayat Record</h1>
      <h2 style="margin: 10px 0 20px 0;">${serviceName}</h2>
      <div style="display: flex; justify-content: space-between; margin-bottom: 20px;">
        <div>Applicant: ${userName}</div>
        <div>Date: ${new Date().toLocaleDateString()}</div>
      </div>
    </div>
    <table style="width: 100%; border-collapse: collapse; margin-top: 20px;">
      <thead>
        <tr style="background-color: #00008B; color: white;">
          <th style="border: 1px solid #ddd; padding: 10px; text-align: left;">Field</th>
          <th style="border: 1px solid #ddd; padding: 10px; text-align: left;">Value</th>
        </tr>
      </thead>
      <tbody>
  `
  
  // Add data rows
  Object.entries(applicationData).forEach(([key, value]) => {
    const formattedKey = key
      .replace(/([A-Z])/g, ' $1')
      .replace(/^./, (str) => str.toUpperCase())
    
    let formattedValue = ''
    if (Array.isArray(value)) {
      formattedValue = value.join(', ')
    } else if (value instanceof Date) {
      formattedValue = value.toLocaleDateString()
    } else {
      formattedValue = String(value || 'Not provided')
    }
    
    htmlContent += `
      <tr>
        <td style="border: 1px solid #ddd; padding: 8px;">${formattedKey}</td>
        <td style="border: 1px solid #ddd; padding: 8px;">${formattedValue}</td>
      </tr>
    `
  })
  
  htmlContent += `
      </tbody>
    </table>
    <div style="margin-top: 30px; text-align: center; font-size: 12px; color: #666;">
      Generated by Digital e-Gram Panchayat | All services are completely free
    </div>
  `
  
  tempElement.innerHTML = htmlContent
  document.body.appendChild(tempElement)
  
  // Use html2canvas to convert the element to canvas
  const canvas = await html2canvas(tempElement, {
    scale: 2, // Higher quality
    backgroundColor: '#ffffff'
  })
  
  // Remove the temporary element
  document.body.removeChild(tempElement)
  
  // Convert canvas to blob
  return new Promise<Blob>((resolve) => {
    canvas.toBlob((blob) => {
      if (blob) {
        resolve(blob)
      } else {
        // Fallback if blob creation fails
        resolve(new Blob())
      }
    }, 'image/jpeg', 0.95)
  })
}

/**
 * Trigger download of a Blob as a file
 * @param blob - The Blob to download
 * @param filename - The filename for the download
 */
function downloadBlob(blob: Blob, filename: string) {
  const url = URL.createObjectURL(blob)
  const a = document.createElement('a')
  a.href = url
  a.download = filename
  document.body.appendChild(a)
  a.click()
  document.body.removeChild(a)
  URL.revokeObjectURL(url)
}

export { generatePDF, generateJPG, downloadBlob, showNotification }